# References:
# - https://stackoverflow.com/questions/55905120/how-to-prevent-cloud-build-from-running-builds-in-parallel
# - https://cloud.google.com/build/docs/samples/cloudbuild-python-yaml
---
steps:
  # Cancel Parallel Builds before Running
  - id: "Stop Parallel Cloud Build Trigger Runs"
    name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        on_going_build=($(gcloud builds list --ongoing --format='value(id)' --filter="substitutions.TRIGGER_NAME=$TRIGGER_NAME" | xargs))
        for (( i=0; i<${#on_going_build[@]}; i++ )); do
          if [ "$i" -gt "0" ]; then # skip current
            echo "Cancelling build ${on_going_build[i]}"

            gcloud builds cancel ${on_going_build[i]}
          fi
        done
  # Fix Config
  - name: "us-east1-docker.pkg.dev/engineering-artifacts-dev/docker/python-base-38:latest"
    entrypoint: "rm"
    args:
      - "poetry.toml"
  # Install Dependencies
  - name: "us-east1-docker.pkg.dev/engineering-artifacts-dev/docker/python-base-38:latest"
    entrypoint: poetry
    args:
      - "install"
  # Build Pkg
  - name: "us-east1-docker.pkg.dev/engineering-artifacts-dev/docker/python-base-38:latest"
    entrypoint: bash
    args:
      - "-c"
      - |
        poetry build;
  - name: "us-east1-docker.pkg.dev/engineering-artifacts-dev/docker/python-base-38:latest"
    entrypoint: bash
    args:
      - "-c"
      - |
        poetry config repositories.python https://us-east1-python.pkg.dev/devops-poc-328820/python/;
        poetry config http-basic.python oauth2accesstoken $(gcloud auth application-default print-access-token);
        poetry config --list;
        packageVersion=$(poetry version | awk '{print $2}')
        echo "Your pyproject.toml version: $packageVersion"
        versionRegex="^${packageVersion}$"
        echo "Your regex: $versionRegex"
        if gcloud artifacts versions list --project=devops-poc-328820 --package=poetry --repository=python --location=us-east1 --format="csv(VERSION)" | grep "$versionRegex"
        then
          echo "Version already exists in repo."
          echo "When ready to publish, bump version in pyproject.toml and about.py"
          exit 1
        else
          echo "publishing package version $packageVersion to repository."
          poetry publish -r python;
        fi
options:
  logging: "CLOUD_LOGGING_ONLY"